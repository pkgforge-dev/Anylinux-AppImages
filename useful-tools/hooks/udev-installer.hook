#!/bin/sh

# Helper script in POSIX shell to install udev rules

# checks if the bundled udev rules are installed, checks in multiple places
# to make sure they were not installed by other means, then informs the user
# that the udev rules need to be installed, then it will
# use pkexec or lxqt-sudo to gain rights to install them
# at /usr/local/lib/udev

# to use this place this script at the top level of the AppDir
# then add your udev rules to one of the following locations:
# AppDir/etc/udev/rules.d
# AppDir/lib/udev/rules.d
# AppDir/usr/lib/udev/rules.d

# You can set UDEV_INSTALL_MSG to change displayed the message

# Note this will only install udev rules, nothing else, some rules require the
# user to be in a group, in that case you will need to change this script

set -e

# Use relative path to make sure we pick the `.env` from the same AppDir
PARENTDIR="$(cd "${0%/*}" && echo "${PWD%/*}")"
CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}"
LOCKFILEPATH="$CACHEDIR"/."${APPIMAGE##*/}"-disable-udev-check
UDEV_INSTALL_MSG="${UDEV_INSTALL_MSG:-${APPIMAGE##*/} needs udev rules in order to work. Do you wish to install them?}"
DO_NOT_ASK="Do you wish to not see this message again?"

# make sure we have the needed deps
_sanity_check() {
	if [ -z "$PARENTDIR" ] || [ -z "$APPIMAGE" ]; then
		return 1
	elif ! command -v cp \
	  || ! command -v mkdir \
	  || ! command -v notify; then
		return 1
	elif ! command -v pkexec \
	  && ! command -v lxqt-sudo; then
		return 1
	fi
}

_check_udev() {
	# Add any possible udev files in the array
	if [ -d "$PARENTDIR"/etc/udev/rules.d ]; then
		UDEVDIR="$PARENTDIR"/etc/udev/rules.d
		set -- "$PARENTDIR"/etc/udev/rules.d/*
	elif [ -d "$PARENTDIR"/lib/rules.d ]; then
		UDEVDIR="$PARENTDIR"/lib/rules.d
		set -- "$PARENTDIR"/lib/udev/rules.d/*
	elif [ -d "$PARENTDIR"/usr/lib/rules.d ]; then
		UDEVDIR="$PARENTDIR"/usr/lib/rules.d
		set -- "$PARENTDIR"/usr/lib/udev/rules.d/*
	else
		>&2 echo "ERROR: No udev rules found, make sure to include"
		>&2 echo "them in one of the following places in the AppDir:"
		>&2 echo "AppDir/etc/udev/rules.d"
		>&2 echo "AppDir/lib/udev/rules.d"
		>&2 echo "AppDir/usr/lib/udev/rules.d"
		return 1
	fi

	# check if it is already installed on the host, check in multiple
	# places since they could be installed by distro or other means
	for udev_file do
		if [ -f /etc/udev/rules.d/"${udev_file##*/}" ] \
		  || [ -f /usr/lib/udev/rules.d/"${udev_file##*/}" ] \
		  || [ -f /usr/local/lib/udev/rules.d/"${udev_file##*/}" ]; then
			shift
		fi
	done

	# bundled udev rules are already installed if the array is empty
	if [ -z "$1" ]; then
		exit 0
	fi
}

_install_udev() {
	set -u
	SUDOCMD="$(command -v pkexec || command -v lxqt-sudo)"

	# due to some weird issue I noticed in kubuntu, we do not have
	# permission to copy the dir from the FUSE filesystem to /usr/local
	# we need to instead copy the dir first to the user's home and then
	# copy it over to /usr/local...

	# just in case there is something funny there already
	rm -rf "$CACHEDIR"/.tmp-udev-rules
	cp -rv "$UDEVDIR" "$CACHEDIR"/.tmp-udev-rules
	UDEVDIR="$CACHEDIR"/.tmp-udev-rules

	"$SUDOCMD" /bin/sh -c "
	  mkdir -p /usr/local/lib/udev/rules.d
	  cp -v '$UDEVDIR'/* /usr/local/lib/udev/rules.d
	  command -v udevadm && udevadm control --reload-rules
	"
	rm -rf "$UDEVDIR"
	notify "udev rules successfully installed!"
}

_do_not_ask_again() {
	mkdir -p "$CACHEDIR"
	echo "delete me to enable again" > "$LOCKFILEPATH"
}

# if check fails exit without error so that the app can still launch
_sanity_check 1>/dev/null || exit 0
_check_udev

if [ -f "$LOCKFILEPATH" ]; then
	exit 0
elif notify --display-question "$UDEV_INSTALL_MSG"; then
	_install_udev
elif notify --display-question "$DO_NOT_ASK"; then
	_do_not_ask_again
fi
